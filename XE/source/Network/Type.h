/*!
 * \file	Type.h
 *
 * \author	ZhengYuanQing
 * \date	2022/03/05
 * \email	zhengyuanqing.95@gmail.com
 *
 */
#ifndef TYPE_H__6C170E6D_D354_483E_BFED_93FF8ED5FC97
#define TYPE_H__6C170E6D_D354_483E_BFED_93FF8ED5FC97

#include "Declare.h"

#include "Utils/Flags.hpp"
#include "Utils/Handle.hpp"

BEG_XE_NAMESPACE

DECL_HANDLE( RPC );
DECL_HANDLE( Client );
DECL_HANDLE( Server );
DECL_HANDLE( Session );

enum class RPCProtocolType : XE::uint8
{
	INVOKE = 1 << 0,
	RESULT = 1 << 1,
};

enum class HttpMethodType
{
	HTTP_GET,
	HTTP_HEAD,
	HTTP_POST,
	HTTP_PUT,
	HTTP_DELETE,
	HTTP_CONNECT,
	HTTP_OPTIONS,
	HTTP_TRACE,
};
DECL_XE_ENUM( HttpMethodType );

enum class HttpVersionType
{
	HTTP_1_0,
	HTTP_1_1,
};
DECL_XE_ENUM( HttpVersionType );

enum class HttpHeaderFieldType
{
	UNKNOWN = 0,

	HTTP_A_IM,
	HTTP_ACCEPT,
	HTTP_ACCEPT_ADDITIONS,
	HTTP_ACCEPT_CHARSET,
	HTTP_ACCEPT_DATETIME,
	HTTP_ACCEPT_ENCODING,
	HTTP_ACCEPT_FEATURES,
	HTTP_ACCEPT_LANGUAGE,
	HTTP_ACCEPT_PATCH,
	HTTP_ACCEPT_POST,
	HTTP_ACCEPT_RANGES,
	HTTP_ACCESS_CONTROL,
	HTTP_ACCESS_CONTROL_ALLOW_CREDENTIALS,
	HTTP_ACCESS_CONTROL_ALLOW_HEADERS,
	HTTP_ACCESS_CONTROL_ALLOW_METHODS,
	HTTP_ACCESS_CONTROL_ALLOW_ORIGIN,
	HTTP_ACCESS_CONTROL_EXPOSE_HEADERS,
	HTTP_ACCESS_CONTROL_MAX_AGE,
	HTTP_ACCESS_CONTROL_REQUEST_HEADERS,
	HTTP_ACCESS_CONTROL_REQUEST_METHOD,
	HTTP_AGE,
	HTTP_ALLOW,
	HTTP_ALPN,
	HTTP_ALSO_CONTROL,
	HTTP_ALT_SVC,
	HTTP_ALT_USED,
	HTTP_ALTERNATE_RECIPIENT,
	HTTP_ALTERNATES,
	HTTP_APPARENTLY_TO,
	HTTP_APPLY_TO_REDIRECT_REF,
	HTTP_APPROVED,
	HTTP_ARCHIVE,
	HTTP_ARCHIVED_AT,
	HTTP_ARTICLE_NAMES,
	HTTP_ARTICLE_UPDATES,
	HTTP_AUTHENTICATION_CONTROL,
	HTTP_AUTHENTICATION_INFO,
	HTTP_AUTHENTICATION_RESULTS,
	HTTP_AUTHORIZATION,
	HTTP_AUTO_SUBMITTED,
	HTTP_AUTOFORWARDED,
	HTTP_AUTOSUBMITTED,
	HTTP_BASE,
	HTTP_BCC,
	HTTP_BODY,
	HTTP_C_EXT,
	HTTP_C_MAN,
	HTTP_C_OPT,
	HTTP_C_PEP,
	HTTP_C_PEP_INFO,
	HTTP_CACHE_CONTROL,
	HTTP_CALDAV_TIMEZONES,
	HTTP_CANCEL_KEY,
	HTTP_CANCEL_LOCK,
	HTTP_CC,
	HTTP_CLOSE,
	HTTP_COMMENTS,
	HTTP_COMPLIANCE,
	HTTP_CONNECTION,
	HTTP_CONTENT_ALTERNATIVE,
	HTTP_CONTENT_BASE,
	HTTP_CONTENT_DESCRIPTION,
	HTTP_CONTENT_DISPOSITION,
	HTTP_CONTENT_DURATION,
	HTTP_CONTENT_ENCODING,
	HTTP_CONTENT_FEATURES,
	HTTP_CONTENT_ID,
	HTTP_CONTENT_IDENTIFIER,
	HTTP_CONTENT_LANGUAGE,
	HTTP_CONTENT_LENGTH,
	HTTP_CONTENT_LOCATION,
	HTTP_CONTENT_MD5,
	HTTP_CONTENT_RANGE,
	HTTP_CONTENT_RETURN,
	HTTP_CONTENT_SCRIPT_TYPE,
	HTTP_CONTENT_STYLE_TYPE,
	HTTP_CONTENT_TRANSFER_ENCODING,
	HTTP_CONTENT_TYPE,
	HTTP_CONTENT_VERSION,
	HTTP_CONTROL,
	HTTP_CONVERSION,
	HTTP_CONVERSION_WITH_LOSS,
	HTTP_COOKIE,
	HTTP_COOKIE2,
	HTTP_COST,
	HTTP_DASL,
	HTTP_DATE,
	HTTP_DATE_RECEIVED,
	HTTP_DAV,
	HTTP_DEFAULT_STYLE,
	HTTP_DEFERRED_DELIVERY,
	HTTP_DELIVERY_DATE,
	HTTP_DELTA_BASE,
	HTTP_DEPTH,
	HTTP_DERIVED_FROM,
	HTTP_DESTINATION,
	HTTP_DIFFERENTIAL_ID,
	HTTP_DIGEST,
	HTTP_DISCARDED_X400_IPMS_EXTENSIONS,
	HTTP_DISCARDED_X400_MTS_EXTENSIONS,
	HTTP_DISCLOSE_RECIPIENTS,
	HTTP_DISPOSITION_NOTIFICATION_OPTIONS,
	HTTP_DISPOSITION_NOTIFICATION_TO,
	HTTP_DISTRIBUTION,
	HTTP_DKIM_SIGNATURE,
	HTTP_DL_EXPANSION_HISTORY,
	HTTP_DOWNGRADED_BCC,
	HTTP_DOWNGRADED_CC,
	HTTP_DOWNGRADED_DISPOSITION_NOTIFICATION_TO,
	HTTP_DOWNGRADED_FINAL_RECIPIENT,
	HTTP_DOWNGRADED_FROM,
	HTTP_DOWNGRADED_IN_REPLY_TO,
	HTTP_DOWNGRADED_MAIL_FROM,
	HTTP_DOWNGRADED_MESSAGE_ID,
	HTTP_DOWNGRADED_ORIGINAL_RECIPIENT,
	HTTP_DOWNGRADED_RCPT_TO,
	HTTP_DOWNGRADED_REFERENCES,
	HTTP_DOWNGRADED_REPLY_TO,
	HTTP_DOWNGRADED_RESENT_BCC,
	HTTP_DOWNGRADED_RESENT_CC,
	HTTP_DOWNGRADED_RESENT_FROM,
	HTTP_DOWNGRADED_RESENT_REPLY_TO,
	HTTP_DOWNGRADED_RESENT_SENDER,
	HTTP_DOWNGRADED_RESENT_TO,
	HTTP_DOWNGRADED_RETURN_PATH,
	HTTP_DOWNGRADED_SENDER,
	HTTP_DOWNGRADED_TO,
	HTTP_EDIINT_FEATURES,
	HTTP_EESST_VERSION,
	HTTP_ENCODING,
	HTTP_ENCRYPTED,
	HTTP_ERRORS_TO,
	HTTP_ETAG,
	HTTP_EXPECT,
	HTTP_EXPIRES,
	HTTP_EXPIRY_DATE,
	HTTP_EXT,
	HTTP_FOLLOWUP_TO,
	HTTP_FORWARDED,
	HTTP_FROM,
	HTTP_GENERATE_DELIVERY_REPORT,
	HTTP_GETPROFILE,
	HTTP_HOBAREG,
	HTTP_HOST,
	HTTP_HTTP2_SETTINGS,
	HTTP_IF_,
	HTTP_IF_MATCH,
	HTTP_IF_MODIFIED_SINCE,
	HTTP_IF_NONE_MATCH,
	HTTP_IF_RANGE,
	HTTP_IF_SCHEDULE_TAG_MATCH,
	HTTP_IF_UNMODIFIED_SINCE,
	HTTP_IM,
	HTTP_IMPORTANCE,
	HTTP_IN_REPLY_TO,
	HTTP_INCOMPLETE_COPY,
	HTTP_INJECTION_DATE,
	HTTP_INJECTION_INFO,
	HTTP_JABBER_ID,
	HTTP_KEEP_ALIVE,
	HTTP_KEYWORDS,
	HTTP_LABEL,
	HTTP_LANGUAGE,
	HTTP_LAST_MODIFIED,
	HTTP_LATEST_DELIVERY_TIME,
	HTTP_LINES,
	HTTP_LINK,
	HTTP_LIST_ARCHIVE,
	HTTP_LIST_HELP,
	HTTP_LIST_ID,
	HTTP_LIST_OWNER,
	HTTP_LIST_POST,
	HTTP_LIST_SUBSCRIBE,
	HTTP_LIST_UNSUBSCRIBE,
	HTTP_LIST_UNSUBSCRIBE_POST,
	HTTP_LOCATION,
	HTTP_LOCK_TOKEN,
	HTTP_MAN,
	HTTP_MAX_FORWARDS,
	HTTP_MEMENTO_DATETIME,
	HTTP_MESSAGE_CONTEXT,
	HTTP_MESSAGE_ID,
	HTTP_MESSAGE_TYPE,
	HTTP_METER,
	HTTP_METHOD_CHECK,
	HTTP_METHOD_CHECK_EXPIRES,
	HTTP_MIME_VERSION,
	HTTP_MMHS_ACP127_MESSAGE_IDENTIFIER,
	HTTP_MMHS_AUTHORIZING_USERS,
	HTTP_MMHS_CODRESS_MESSAGE_INDICATOR,
	HTTP_MMHS_COPY_PRECEDENCE,
	HTTP_MMHS_EXEMPTED_ADDRESS,
	HTTP_MMHS_EXTENDED_AUTHORISATION_INFO,
	HTTP_MMHS_HANDLING_INSTRUCTIONS,
	HTTP_MMHS_MESSAGE_INSTRUCTIONS,
	HTTP_MMHS_MESSAGE_TYPE,
	HTTP_MMHS_ORIGINATOR_PLAD,
	HTTP_MMHS_ORIGINATOR_REFERENCE,
	HTTP_MMHS_OTHER_RECIPIENTS_INDICATOR_CC,
	HTTP_MMHS_OTHER_RECIPIENTS_INDICATOR_TO,
	HTTP_MMHS_PRIMARY_PRECEDENCE,
	HTTP_MMHS_SUBJECT_INDICATOR_CODES,
	HTTP_MT_PRIORITY,
	HTTP_NEGOTIATE,
	HTTP_NEWSGROUPS,
	HTTP_NNTP_POSTING_DATE,
	HTTP_NNTP_POSTING_HOST,
	HTTP_NON_COMPLIANCE,
	HTTP_OBSOLETES,
	HTTP_OPT,
	HTTP_OPTIONAL,
	HTTP_OPTIONAL_WWW_AUTHENTICATE,
	HTTP_ORDERING_TYPE,
	HTTP_ORGANIZATION,
	HTTP_ORIGIN,
	HTTP_ORIGINAL_ENCODED_INFORMATION_TYPES,
	HTTP_ORIGINAL_FROM,
	HTTP_ORIGINAL_MESSAGE_ID,
	HTTP_ORIGINAL_RECIPIENT,
	HTTP_ORIGINAL_SENDER,
	HTTP_ORIGINAL_SUBJECT,
	HTTP_ORIGINATOR_RETURN_ADDRESS,
	HTTP_OVERWRITE,
	HTTP_P3P,
	HTTP_PATH,
	HTTP_PEP,
	HTTP_PEP_INFO,
	HTTP_PICS_LABEL,
	HTTP_POSITION,
	HTTP_POSTING_VERSION,
	HTTP_PRAGMA,
	HTTP_PREFER,
	HTTP_PREFERENCE_APPLIED,
	HTTP_PREVENT_NONDELIVERY_REPORT,
	HTTP_PRIORITY,
	HTTP_PRIVICON,
	HTTP_PROFILEOBJECT,
	HTTP_PROTOCOL,
	HTTP_PROTOCOL_INFO,
	HTTP_PROTOCOL_QUERY,
	HTTP_PROTOCOL_REQUEST,
	HTTP_PROXY_AUTHENTICATE,
	HTTP_PROXY_AUTHENTICATION_INFO,
	HTTP_PROXY_AUTHORIZATION,
	HTTP_PROXY_CONNECTION,
	HTTP_PROXY_FEATURES,
	HTTP_PROXY_INSTRUCTION,
	HTTP_PUBLIC_,
	HTTP_PUBLIC_KEY_PINS,
	HTTP_PUBLIC_KEY_PINS_REPORT_ONLY,
	HTTP_RANGE,
	HTTP_RECEIVED,
	HTTP_RECEIVED_SPF,
	HTTP_REDIRECT_REF,
	HTTP_REFERENCES,
	HTTP_REFERER,
	HTTP_REFERER_ROOT,
	HTTP_RELAY_VERSION,
	HTTP_REPLY_BY,
	HTTP_REPLY_TO,
	HTTP_REQUIRE_RECIPIENT_VALID_SINCE,
	HTTP_RESENT_BCC,
	HTTP_RESENT_CC,
	HTTP_RESENT_DATE,
	HTTP_RESENT_FROM,
	HTTP_RESENT_MESSAGE_ID,
	HTTP_RESENT_REPLY_TO,
	HTTP_RESENT_SENDER,
	HTTP_RESENT_TO,
	HTTP_RESOLUTION_HINT,
	HTTP_RESOLVER_LOCATION,
	HTTP_RETRY_AFTER,
	HTTP_RETURN_PATH,
	HTTP_SAFE,
	HTTP_SCHEDULE_REPLY,
	HTTP_SCHEDULE_TAG,
	HTTP_SEC_FETCH_DEST,
	HTTP_SEC_FETCH_MODE,
	HTTP_SEC_FETCH_SITE,
	HTTP_SEC_FETCH_USER,
	HTTP_SEC_WEBSOCKET_ACCEPT,
	HTTP_SEC_WEBSOCKET_EXTENSIONS,
	HTTP_SEC_WEBSOCKET_KEY,
	HTTP_SEC_WEBSOCKET_PROTOCOL,
	HTTP_SEC_WEBSOCKET_VERSION,
	HTTP_SECURITY_SCHEME,
	HTTP_SEE_ALSO,
	HTTP_SENDER,
	HTTP_SENSITIVITY,
	HTTP_SERVER,
	HTTP_SET_COOKIE,
	HTTP_SET_COOKIE2,
	HTTP_SETPROFILE,
	HTTP_SIO_LABEL,
	HTTP_SIO_LABEL_HISTORY,
	HTTP_SLUG,
	HTTP_SOAPACTION,
	HTTP_SOLICITATION,
	HTTP_STATUS_URI,
	HTTP_STRICT_TRANSPORT_SECURITY,
	HTTP_SUBJECT,
	HTTP_SUBOK,
	HTTP_SUBST,
	HTTP_SUMMARY,
	HTTP_SUPERSEDES,
	HTTP_SURROGATE_CAPABILITY,
	HTTP_SURROGATE_CONTROL,
	HTTP_TCN,
	HTTP_TE,
	HTTP_TIMEOUT,
	HTTP_TITLE,
	HTTP_TO,
	HTTP_TOPIC,
	HTTP_TRAILER,
	HTTP_TRANSFER_ENCODING,
	HTTP_TTL,
	HTTP_UA_COLOR,
	HTTP_UA_MEDIA,
	HTTP_UA_PIXELS,
	HTTP_UA_RESOLUTION,
	HTTP_UA_WINDOWPIXELS,
	HTTP_UPGRADE,
	HTTP_URGENCY,
	HTTP_URI,
	HTTP_USER_AGENT,
	HTTP_VARIANT_VARY,
	HTTP_VARY,
	HTTP_VBR_INFO,
	HTTP_VERSION,
	HTTP_VIA,
	HTTP_WANT_DIGEST,
	HTTP_WARNING,
	HTTP_WWW_AUTHENTICATE,
	HTTP_X_ARCHIVED_AT,
	HTTP_X_DEVICE_ACCEPT,
	HTTP_X_DEVICE_ACCEPT_CHARSET,
	HTTP_X_DEVICE_ACCEPT_ENCODING,
	HTTP_X_DEVICE_ACCEPT_LANGUAGE,
	HTTP_X_DEVICE_USER_AGENT,
	HTTP_X_FRAME_OPTIONS,
	HTTP_X_MITTENTE,
	HTTP_X_PGP_SIG,
	HTTP_X_RICEVUTA,
	HTTP_X_RIFERIMENTO_MESSAGE_ID,
	HTTP_X_TIPORICEVUTA,
	HTTP_X_TRASPORTO,
	HTTP_X_VERIFICASICUREZZA,
	HTTP_X400_CONTENT_IDENTIFIER,
	HTTP_X400_CONTENT_RETURN,
	HTTP_X400_CONTENT_TYPE,
	HTTP_X400_MTS_IDENTIFIER,
	HTTP_X400_ORIGINATOR,
	HTTP_X400_RECEIVED,
	HTTP_X400_RECIPIENTS,
	HTTP_X400_TRACE,
	HTTP_XREF,
};
DECL_XE_ENUM( HttpHeaderFieldType );

struct XE_API Endpoint
{
	XE::String Addr;
	XE::String Port;
};

struct XE_API BufferIterator
{
	using iterator_category = std::bidirectional_iterator_tag;
	using value_type = char;
	using difference_type = std::size_t;
	using pointer = const char *;
	using reference = const char &;


	reference operator*() const;

	BufferIterator & operator++();

	BufferIterator operator++( int );

	BufferIterator & operator--();

	BufferIterator operator--( int );

	BufferIterator & operator+=( const difference_type _Off );

	BufferIterator operator+( const difference_type _Off ) const;

	BufferIterator & operator-=( const difference_type _Off );

	BufferIterator operator-( const difference_type _Off ) const;

	difference_type operator-( const BufferIterator & _Right ) const;

	bool operator==( const BufferIterator & _Right ) const;

	std::array< char, 64 > _Ptr;
};

struct XE_API EndlCondition
{
	EndlCondition() = default;

	EndlCondition( const XE::String & val )
		:endl( val )
	{

	}

	template <typename Iterator> std::pair<Iterator, bool> operator()( Iterator begin, Iterator end ) const
	{
		if ( endl.empty() )
		{
			return { begin, true };
		}

		std::regex reg( endl.std_str() );
		std::match_results<Iterator> results;
		if ( std::regex_search( begin, end, results, reg ) )
		{
			return { results.begin()->second, true };
		}

		return { begin, false };
	}

	XE::String endl;
};

struct XE_API MatchCondition
{
	MatchCondition() = default;

	MatchCondition( const XE::Delegate< XE::Pair< BufferIterator, bool >( BufferIterator, BufferIterator ) > & m )
		:match( m )
	{

	}

	template <typename Iterator> std::pair<Iterator, bool> operator()( Iterator begin, Iterator end ) const
	{
		if ( match == nullptr )
		{
			return { begin, true };
		}

		XE::BufferIterator first, second;

		::memcpy( first._Ptr.data(), &begin, sizeof( begin ) );
		::memcpy( second._Ptr.data(), &end, sizeof( end ) );

		auto pair = match( first, second );

		Iterator it = begin;

		::memcpy( &it, pair.first._Ptr.data(), sizeof( it ) );

		return { it, pair.second };
	}

	XE::Delegate< XE::Pair< BufferIterator, bool >( BufferIterator, BufferIterator ) > match;
};

struct XE_API RegexCondition
{
	RegexCondition() = default;

	RegexCondition( const std::regex & r )
		:regex( r )
	{

	}

	template <typename Iterator> std::pair<Iterator, bool> operator()( Iterator begin, Iterator end ) const
	{
		if ( regex.mark_count() == 0 )
		{
			return { begin, true };
		}

		std::match_results<Iterator> results;

		if ( std::regex_match( begin, end, results, regex ) )
		{
			return { results.begin()->first, true };
		}

		return { begin, false };
	}

	std::regex regex;
};

struct XE_API DataGramCondition
{
	DataGramCondition() = default;

	template <typename Iterator> std::pair<Iterator, bool> operator()( Iterator begin, Iterator end ) const
	{
		if ( std::distance( begin, end ) > sizeof( XE::uint64 ) )
		{
			XE::uint64 size = 0;
			XE::ReadBigEndian( &( *begin ), size );

			if ( std::distance( begin + sizeof( XE::uint64 ), end ) >= static_cast<XE::int64>( size ) )
			{
				std::advance( begin, size );
				return std::make_pair( begin, true );
			}
		}

		return std::make_pair( begin, false );
	}
};

struct XE_API TransferCondition
{
	TransferCondition() = default;

	TransferCondition( XE::uint64 sz )
		:size( sz )
	{

	}

	template <typename Iterator> std::pair<Iterator, bool> operator()( Iterator begin, Iterator end ) const
	{
		if ( std::distance( begin, end ) >= static_cast<XE::int64>( size ) )
		{
			std::advance( begin, size );
			return std::make_pair( begin, true );
		}

		return std::make_pair( begin, false );
	}

	XE::uint64 size;
};

XE_INLINE XE::String ToString( std::error_code val )
{
	return XE::ToString( val.value() ) + " : " + val.message();
}

END_XE_NAMESPACE

#endif//TYPE_H__6C170E6D_D354_483E_BFED_93FF8ED5FC97
